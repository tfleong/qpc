<?xml version="1.0" encoding="UTF-8"?>
<model version="3.3.0">
 <documentation>QHsmTst is a contrived state machine from Chapter 2 of the PSiCC2 book for testing all possible transition topologies with up to 4-levels of state nesting.</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="QHsmTstEvt" superclass="qpc::QEvt"/>
  <class name="TouchscreenEvt" superclass="qpc::QEvt"/>
 </package>
 <package name="AOs" stereotype="0x02">
  <class name="QHsmTst" superclass="qpc::QActive">
   <documentation>Test active object</documentation>
   <attribute name="foo" type="uint8_t" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1/5">
     <action>(void)e; /* avoid compiler warning */
me-&gt;foo = 0U;
LCD_UsrLog(&quot;top-INIT;&quot;);</action>
     <initial_glyph conn="76,2,4,1,6,-8">
      <action box="-7,6,13,4"/>
     </initial_glyph>
    </initial>
    <state name="s">
     <entry>LCD_UsrLog(&quot;s-ENTRY;&quot;);</entry>
     <exit>LCD_UsrLog(&quot;s-EXIT;&quot;);</exit>
     <initial target="../4/7">
      <action>LCD_UsrLog(&quot;s-INIT;&quot;);</action>
      <initial_glyph conn="31,7,5,0,-9,19">
       <action box="-6,0,6,2"/>
      </initial_glyph>
     </initial>
     <tran trig="I">
      <choice>
       <guard>me-&gt;foo</guard>
       <action>me-&gt;foo = 0U;
LCD_UsrLog(&quot;s-I;&quot;);
LCD_UsrLog(&quot;\n&quot;);</action>
       <choice_glyph conn="7,10,5,-1,8">
        <action box="1,0,12,4"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,10,3,-1,5">
       <action box="1,-2,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="E" target="../4/7">
      <action>LCD_UsrLog(&quot;s-E;&quot;);</action>
      <tran_glyph conn="28,39,2,2,-6">
       <action box="1,-2,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TERMINATE">
      <tran_glyph conn="71,19,1,-1,4,17">
       <action box="0,-2,9,2"/>
      </tran_glyph>
     </tran>
     <state name="s1">
      <entry>LCD_UsrLog(&quot;s1-ENTRY;&quot;);</entry>
      <exit>LCD_UsrLog(&quot;s1-EXIT;&quot;);</exit>
      <initial target="../7">
       <action>LCD_UsrLog(&quot;s1-INIT;&quot;);</action>
       <initial_glyph conn="26,19,5,0,-2,7">
        <action box="-4,0,6,2"/>
       </initial_glyph>
      </initial>
      <tran trig="I">
       <action>LCD_UsrLog(&quot;s1-I;&quot;);
LCD_UsrLog(&quot;\n&quot;);</action>
       <tran_glyph conn="13,23,3,-1,6">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="D">
       <choice target="../../..">
        <guard>!me-&gt;foo</guard>
        <action>me-&gt;foo = 1U;
LCD_UsrLog(&quot;s1-D;&quot;);</action>
        <choice_glyph conn="7,17,4,3,6,-5">
         <action box="-4,2,11,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="13,17,3,-1,-6">
        <action box="-2,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="A" target="..">
       <action>LCD_UsrLog(&quot;s1-A;&quot;);</action>
       <tran_glyph conn="27,15,0,0,-3,4,3">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="B" target="../7">
       <action>LCD_UsrLog(&quot;s1-B;&quot;);</action>
       <tran_glyph conn="13,27,3,3,6">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="F" target="../../5/4/4">
       <action>LCD_UsrLog(&quot;s1-F;&quot;);</action>
       <tran_glyph conn="34,31,1,3,17">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="C" target="../../5">
       <action>LCD_UsrLog(&quot;s1-C;&quot;);</action>
       <tran_glyph conn="34,17,1,3,6">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state name="s11">
       <entry>LCD_UsrLog(&quot;s11-ENTRY;&quot;);
LCD_UsrLog(&quot;\n&quot;);</entry>
       <exit>LCD_UsrLog(&quot;s11-EXIT;&quot;);</exit>
       <tran trig="H" target="../../..">
        <action>LCD_UsrLog(&quot;s11-H;&quot;);</action>
        <tran_glyph conn="24,33,2,2,6">
         <action box="1,0,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="D">
        <choice target="../../..">
         <guard>me-&gt;foo</guard>
         <action>me-&gt;foo = 0U;
LCD_UsrLog(&quot;s11-D;&quot;);</action>
         <choice_glyph conn="7,31,4,3,-6,6">
          <action box="-4,-5,11,4"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="19,31,3,-1,-12">
         <action box="-2,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="G" target="../../../5/4/4">
        <action>LCD_UsrLog(&quot;s11-G;&quot;);</action>
        <tran_glyph conn="31,27,1,3,20">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="19,26,12,7">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="13,15,21,21">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="s2">
      <entry>LCD_UsrLog(&quot;s2-ENTRY;&quot;);</entry>
      <exit>LCD_UsrLog(&quot;s2-EXIT;&quot;);</exit>
      <initial target="../4/4">
       <action>LCD_UsrLog(&quot;s2-INIT;&quot;);</action>
       <initial_glyph conn="65,10,5,0,-8,15">
        <action box="-4,0,6,2"/>
       </initial_glyph>
      </initial>
      <tran trig="I">
       <choice>
        <guard>!me-&gt;foo</guard>
        <action>me-&gt;foo = 1U;
LCD_UsrLog(&quot;s2-I;&quot;);
LCD_UsrLog(&quot;\n&quot;);</action>
        <choice_glyph conn="45,14,5,-1,8">
         <action box="1,0,10,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="40,14,3,-1,5">
        <action box="1,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="F" target="../../4/7">
       <action>LCD_UsrLog(&quot;s2-F;&quot;);</action>
       <tran_glyph conn="40,24,3,0,-12,2">
        <action box="-4,0,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="C" target="../../4">
       <action>LCD_UsrLog(&quot;s2-C;&quot;);</action>
       <tran_glyph conn="40,20,3,1,-6">
        <action box="-3,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state name="s21">
       <entry>LCD_UsrLog(&quot;s21-ENTRY;&quot;);</entry>
       <exit>LCD_UsrLog(&quot;s21-EXIT;&quot;);</exit>
       <initial target="../4">
        <action>LCD_UsrLog(&quot;s21-INIT;&quot;);</action>
        <initial_glyph conn="64,23,5,0,-4,2">
         <action box="-2,0,5,2"/>
        </initial_glyph>
       </initial>
       <tran trig="G" target="../../../4">
        <action>LCD_UsrLog(&quot;s21-G;&quot;);</action>
        <tran_glyph conn="45,22,3,1,-11">
         <action box="-3,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="A" target="..">
        <action>LCD_UsrLog(&quot;s21-A;&quot;);</action>
        <tran_glyph conn="59,19,0,0,-3,4,3">
         <action box="1,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="B" target="../4">
        <action>LCD_UsrLog(&quot;s21-B;&quot;);</action>
        <tran_glyph conn="66,27,1,1,-4">
         <action box="-2,-2,5,2"/>
        </tran_glyph>
       </tran>
       <state name="s211">
        <entry>LCD_UsrLog(&quot;s211-ENTRY;&quot;);
LCD_UsrLog(&quot;\n&quot;);</entry>
        <exit>LCD_UsrLog(&quot;s211-EXIT;&quot;);</exit>
        <tran trig="H" target="../../../..">
         <action>LCD_UsrLog(&quot;s211-H;&quot;);</action>
         <tran_glyph conn="57,32,2,2,7">
          <action box="1,0,6,2"/>
         </tran_glyph>
        </tran>
        <tran trig="D" target="../..">
         <action>LCD_UsrLog(&quot;s211-D;&quot;);</action>
         <tran_glyph conn="62,30,1,1,4">
          <action box="0,-2,6,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="51,25,11,7">
         <entry box="1,2,5,2"/>
         <exit box="1,4,5,2"/>
        </state_glyph>
       </state>
       <state_glyph node="45,19,21,15">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="40,6,28,30">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,2,69,37">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="79,41"/>
   </statechart>
  </class>
  <class name="Touchscreen" superclass="qpc::QActive">
   <statechart>
    <initial target="../1">
     <action>(void)e;</action>
     <initial_glyph conn="4,4,5,0,24,4">
      <action box="0,-2,10,4"/>
     </initial_glyph>
    </initial>
    <state name="wait">
     <tran trig="TOUCH">
      <choice>
       <guard>TS_State.touchDetected == 1</guard>
       <action>BSP_TS_GetState(&amp;TS_State);</action>
       <choice_glyph conn="27,13,5,-1,22">
        <action box="1,0,20,4"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard>else</guard>
       <action>BSP_TS_GetState(&amp;TS_State);</action>
       <choice>
        <guard>else</guard>
        <choice_glyph conn="27,25,5,-1,22">
         <action box="9,0,10,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../1">
        <guard>TS_State.touchDetected == 1</guard>
        <choice_glyph conn="27,25,4,0,11">
         <action box="-19,4,19,2"/>
        </choice_glyph>
       </choice>
       <choice_glyph conn="27,13,4,-1,12">
        <action box="-20,3,20,4"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,13,3,-1,23">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="process">
      <entry>if((TS_State.touchX[0] &gt; BUTTON_A_X_MIN) &amp;&amp; (TS_State.touchX[0] &lt; BUTTON_A_X_MAX) &amp;&amp;
(TS_State.touchY[0] &gt; BUTTON_A_Y_MIN) &amp;&amp; (TS_State.touchY[0] &lt; BUTTON_A_Y_MAX)){
    LCD_UsrLog(&quot;A: &quot;);
    qe = Q_NEW(QHsmTstEvt, A_SIG);
    QACTIVE_POST(AO_QHsmTst, &amp;qe-&gt;super, me);
}
else if((TS_State.touchX[0] &gt; BUTTON_B_X_MIN) &amp;&amp; (TS_State.touchX[0] &lt; BUTTON_B_X_MAX) &amp;&amp;
(TS_State.touchY[0] &gt; BUTTON_B_Y_MIN) &amp;&amp; (TS_State.touchY[0] &lt; BUTTON_B_Y_MAX)){
    LCD_UsrLog(&quot;B: &quot;);
    qe = Q_NEW(QHsmTstEvt, B_SIG);
    QACTIVE_POST(AO_QHsmTst, &amp;qe-&gt;super, me);
}
else if((TS_State.touchX[0] &gt; BUTTON_C_X_MIN) &amp;&amp; (TS_State.touchX[0] &lt; BUTTON_C_X_MAX) &amp;&amp;
(TS_State.touchY[0] &gt; BUTTON_C_Y_MIN) &amp;&amp; (TS_State.touchY[0] &lt; BUTTON_C_Y_MAX)){
    LCD_UsrLog(&quot;C: &quot;);
    qe = Q_NEW(QHsmTstEvt, C_SIG);
    QACTIVE_POST(AO_QHsmTst, &amp;qe-&gt;super, me);
}
else if((TS_State.touchX[0] &gt; BUTTON_D_X_MIN) &amp;&amp; (TS_State.touchX[0] &lt; BUTTON_D_X_MAX) &amp;&amp;
(TS_State.touchY[0] &gt; BUTTON_D_Y_MIN) &amp;&amp; (TS_State.touchY[0] &lt; BUTTON_D_Y_MAX)){
    LCD_UsrLog(&quot;D: &quot;);
    qe = Q_NEW(QHsmTstEvt, D_SIG);
    QACTIVE_POST(AO_QHsmTst, &amp;qe-&gt;super, me);
}
else if((TS_State.touchX[0] &gt; BUTTON_E_X_MIN) &amp;&amp; (TS_State.touchX[0] &lt; BUTTON_E_X_MAX) &amp;&amp;
(TS_State.touchY[0] &gt; BUTTON_E_Y_MIN) &amp;&amp; (TS_State.touchY[0] &lt; BUTTON_E_Y_MAX)){
    LCD_UsrLog(&quot;E: &quot;);
    qe = Q_NEW(QHsmTstEvt, E_SIG);
    QACTIVE_POST(AO_QHsmTst, &amp;qe-&gt;super, me);
}
else if((TS_State.touchX[0] &gt; BUTTON_F_X_MIN) &amp;&amp; (TS_State.touchX[0] &lt; BUTTON_F_X_MAX) &amp;&amp;
(TS_State.touchY[0] &gt; BUTTON_F_Y_MIN) &amp;&amp; (TS_State.touchY[0] &lt; BUTTON_F_Y_MAX)){
    LCD_UsrLog(&quot;F: &quot;);
    qe = Q_NEW(QHsmTstEvt, F_SIG);
    QACTIVE_POST(AO_QHsmTst, &amp;qe-&gt;super, me);
}
else if((TS_State.touchX[0] &gt; BUTTON_G_X_MIN) &amp;&amp; (TS_State.touchX[0] &lt; BUTTON_G_X_MAX) &amp;&amp;
(TS_State.touchY[0] &gt; BUTTON_G_Y_MIN) &amp;&amp; (TS_State.touchY[0] &lt; BUTTON_G_Y_MAX)){
    LCD_UsrLog(&quot;G: &quot;);
    qe = Q_NEW(QHsmTstEvt, G_SIG);
    QACTIVE_POST(AO_QHsmTst, &amp;qe-&gt;super, me);
}
else if((TS_State.touchX[0] &gt; BUTTON_H_X_MIN) &amp;&amp; (TS_State.touchX[0] &lt; BUTTON_H_X_MAX) &amp;&amp;
(TS_State.touchY[0] &gt; BUTTON_H_Y_MIN) &amp;&amp; (TS_State.touchY[0] &lt; BUTTON_H_Y_MAX)){
    LCD_UsrLog(&quot;H: &quot;);
    qe = Q_NEW(QHsmTstEvt, H_SIG);
    QACTIVE_POST(AO_QHsmTst, &amp;qe-&gt;super, me);
}
else if((TS_State.touchX[0] &gt; BUTTON_I_X_MIN) &amp;&amp; (TS_State.touchX[0] &lt; BUTTON_I_X_MAX) &amp;&amp;
(TS_State.touchY[0] &gt; BUTTON_I_Y_MIN) &amp;&amp; (TS_State.touchY[0] &lt; BUTTON_I_Y_MAX)){
    LCD_UsrLog(&quot;I: &quot;);
    qe = Q_NEW(QHsmTstEvt, I_SIG);
    QACTIVE_POST(AO_QHsmTst, &amp;qe-&gt;super, me);
}</entry>
      <state_glyph node="22,36,10,10">
       <entry box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="4,8,48,41"/>
    </state>
    <state_diagram size="56,53"/>
   </statechart>
  </class>
  <attribute name="AO_QHsmTst" type="QActive *const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_Touchscreen" type="QActive *const" visibility="0x00" properties="0x00"/>
  <operation name="QHsmTst_ctor" type="void" visibility="0x00" properties="0x00">
   <code>QHsmTst *me = &amp;l_hsmtst;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;QHsmTst_initial));</code>
  </operation>
  <operation name="Touchscreen_ctor" type="void" visibility="0x00" properties="0x00">
   <code>Touchscreen *me = &amp;l_touchscreen;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Touchscreen_initial));</code>
  </operation>
 </package>
 <directory name=".">
  <file name="qhsmtst.h">
   <text>#ifndef qhsmtst_h
#define qhsmtst_h

#include &quot;main.h&quot;

enum QHsmTstSignals {
    A_SIG = Q_USER_SIG,
    B_SIG,
    C_SIG,
    D_SIG,
    E_SIG,
    F_SIG,
    G_SIG,
    H_SIG,
    I_SIG,
    TOUCH_SIG, /* new */
    TERMINATE_SIG, /* unused */
    IGNORE_SIG, /* unused */
    MAX_SIG
};

$declare(Events::QHsmTstEvt)
$declare(Events::TouchscreenEvt)
$declare(AOs::QHsmTst_ctor)
$declare(AOs::AO_QHsmTst)
$declare(AOs::Touchscreen_ctor)
$declare(AOs::AO_Touchscreen)

#endif /* qhsmtst_h */</text>
  </file>
  <file name="qhsmtst.c">
   <text>#include &quot;qhsmtst.h&quot;

$declare(AOs::QHsmTst)

static QHsmTst l_hsmtst; /* the only instance of the QHsmTst class */

/* global-scope definitions ---------------------------------------*/
QActive *const AO_QHsmTst = &amp;l_hsmtst.super;    /* the opaque pointer */

$define(AOs::QHsmTst_ctor)
$define(AOs::QHsmTst)</text>
  </file>
  <file name="touchscreen.c">
   <text>#include &quot;qhsmtst.h&quot;

TS_StateTypeDef TS_State = {0};
QHsmTstEvt *qe;

$declare(AOs::Touchscreen)

static Touchscreen l_touchscreen; /* the only instance of the Touchscreen class */

/* global-scope definitions ---------------------------------------*/
QActive *const AO_Touchscreen = &amp;l_touchscreen.super;    /* the opaque pointer */

$define(AOs::Touchscreen_ctor)
$define(AOs::Touchscreen)</text>
  </file>
 </directory>
</model>
